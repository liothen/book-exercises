# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21,30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten,next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(1,100,2) - 1
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers >= 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers >5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers%%2 != 0] <-0
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21,30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten,next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(1,100,2) - 1
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers >= 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers >5] <- 5
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers >5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers%%2 != 0] <-0
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("beware", "oblivion", "is", "at", "hand", "power", "overwhelming")
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("beware", "oblivion", "is", "at", "hand", "power", "overwhelming")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'",sample(words,1),"'"," is the word of the day", sep='')
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'",sample(words,1),"'"," is the word of the day", sep='')
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'",sample(words,1),"'"," is the word of the day", sep='')
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'",sample(words,1),"'"," is the word of the day", sep='')
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'",sample(words,1),"'"," is the word of the day", sep='')
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[LETTERS[1:5]]
words[LETTERS[1:5]]
words[LETTERS[1:1]]
words[all(LETTERS[1:5])]]
words[all(LETTERS[1:5])]
words[all(words[1]LETTERS[1:5])]
all(words[1]LETTERS[1:5])
all(words[1] == LETTERS[1:5])
words[1] == LETTERS[1:5]
words[c(letters[1:5])]
words[c(letters)]
words[1]
words[2]
words[c("a")]
t <- words[c("a")]
t
t[1]
setNames(words, letters[1:4])
setNames(words, letters[1:5])
setNames(words, letters[1:6])
setNames(words, letters[1:6])
words
words[words[1] == 'a']
words[(words[1] == 'a')]
words[(words[1][1] == 'a')]
words[words == 'a']
words[words == letters[1:6]]
words == letters[1:6]
letters[1:6]
words[1][1]
words[1][1][1]
?substring
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words>="a" & substring(words, 1, 1)<="f"]
words[words>="a" & substring(words, 1, 1)<="f"]
words[substring(words, 1, 1) == letters[1:6]]
words[substring(words, 1, 1) == letters[1:6]]
?substring
substring(words,1,1)
substring(words,1,1) == letters[1:6]
substring(words,1,1) == letters[1]
substring(words,1,1) == all(letters[1:6])
all(letters[1:6])
letters[1:6]
substring(words,1,1) %in% letters[1:6])
substring(words,1,1) %in% letters[1:6]
words[substring(words,1,1) %in% letters[1:6]]
letters
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substring(words,1,1) %in% letters[1:6]]
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[substring(words,1,1) %in% letters[7:13]]
letters[letters == 'a']
letters[a:b]
letters['a':'b']
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'q', 'e')
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(list_of_words, start, end){
list_of_words[list_of_words>= start & substring(words, 1, 1)<=end]
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'q', 'e')
word_bin <- function(list_of_words, start, end){
list_of_words[list_of_words>= start & substring(list_of_words, 1, 1)<=end]
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'q', 'e')
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("beware", "oblivion", "es", "at", "hand", "power", "overwhelming")
# Exercise 3: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("beware", "oblivion", "es", "at", "hand", "power", "overwhelming")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'",sample(words,1),"' is the word of the day", sep='')
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substring(words,1,1) %in% letters[1:6]]
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[substring(words,1,1) %in% letters[7:13]]
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(list_of_words, start, end){
list_of_words[list_of_words>= start & substring(list_of_words, 1, 1)<=end]
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'q', 'e')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e', 'q')
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("beware", "oblivion", "is", "at", "hand", "power", "overwhelming")
# Exercise 3: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("beware", "oblivion", "is", "at", "hand", "power", "overwhelming")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'",sample(words,1),"' is the word of the day", sep='')
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substring(words,1,1) %in% letters[1:6]]
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[substring(words,1,1) %in% letters[7:13]]
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(list_of_words, start, end){
list_of_words[list_of_words>= start & substring(list_of_words, 1, 1)<=end]
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e', 'q')
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Bacon", "Oatmeal", "Milk")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Chili", "Doritos")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast,my_lunch)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Bacon", "Oatmeal", "Milk")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Chili", "Doritos")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast,my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
c(meals, meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
list(meals, meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
append(meals, c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad"))
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Bacon", "Oatmeal", "Milk")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Chili", "Doritos")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast,my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
append(meals, c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
View(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
append(meals, dinner <-c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <-c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <-c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
diner <- meals$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[[2]]
meals
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals["dinner"] <-c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad")
View(meals)
?list
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
View(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <-c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad")
View(meals)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[2]]
View(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1], meals[2])
View(early_meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length())
?length
?lapply
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(), meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals), meals)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals))
length(meals)
lapply(meals, function(x) length(x))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, function(x) length(x))
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
View(meals)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Bacon", "Oatmeal", "Milk")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Chili", "Doritos")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <-c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1], meals[2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, function(x) length(x))
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_piza <- function(meal){
meal <- c(meal, "pizza")
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
print(better_meals)
add_piza <- function(meal){
meal <- c(meal, "pizza")
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, function(x) add_pizza(x))
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Bacon", "Oatmeal", "Milk")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Chili", "Doritos")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <-c("Bite Size Steak", "Mashed Potatos", "Gravy", "Salad")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1], meals[2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, function(x) length(x))
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal){
meal <- c(meal, "pizza")
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
print(better_meals)
print(better_meals)
#Create a variable 'name_length' that holds how many letter
#(including spaces) are in your name (use the 'nchar()' function)
name_length <- nchar("Chris Sargeant")
#Create a variable `lyric` that contains the text "I like to eat apples and bananas"
lyric <- "I like to eat apples and bananas"
#Use the `substr()` function to extract the 1st through 13th letters from the `lyric`, and store the result in a variable called `intro`
intro <- substr(lyric, 1, 13)
#Define a function `imperial_to_metric` that takes in two arguments: a number of feet and a number of inches. The function should return the equivalent length in meters
imperial_to_metric <- function(feet,inches){
inches <- (feet * 12) + inches
(inches * 2.54) / 100
}
imperial_to_metric(6, 5)
describe_difference <- function(a, b){
if(nchar(a) == nchar(b)){
print("Your strings are the same length!")
}else if(nchar(a) > nchar(b)){
print(paste("Your first string is longer by", (nchar(a) - nchar(b)), "characters"))
}else {
print(paste("Your second string is longer by", (nchar(b) - nchar(a)), "characters"))
}
}
describe_difference("Hello", "Hello World")
describe_difference("rofl", "lol")
describe_difference("macos", "macos")
# Subtract `m` FROM `n`. Note the recycling!
print(n - m)
# Subtract `m` FROM `n`. Note the recycling!
print(n - m)
# Exercise 1: creating and operating on vectors
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Chris", "Ethan", "Rachel")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10,1)
# Subtract `m` FROM `n`. Note the recycling!
print(n - m)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
source('~/School/cs445/book-exercises/chapter-07-exercises/exercise-1/exercise.R')
t <- c('lol')
t
1:3 * 3:1
1:3 * 5:1
1:5 * 3:1
(1:5) * (3:1)
(1:5) * (1:3)
(1:15) * (1:3)
(1:10)[-3]
(1:10)[-3,-4]
(1:10)[-3-4]
(1:10)[-3]
(1:10)[-3 & -4]
(1:10)[-3 -4]
(1:10)[-3]
(1:10)[-3]
(1:10)[-3:-2]
(1:10)[-3:-2:-1]
(1:10)[-3:-5]
(1:10)[c(-3, -1)]
